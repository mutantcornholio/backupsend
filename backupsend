#!/usr/bin/env bash

suffix=
identity_file=
filesystem=
remote_host=
show_progress=
lined_progress=
output_file=
max_snapshots=
ssh_command=()
shell_command=()

transform_log() {
  if [ -n "$output_file" ]; then
    perl -ne '($S,$M,$H,$DA,$MO,$Y) = localtime(); $Y += 1900;
      $res=sprintf("[%d-%02d-%02dT%02d:%02d:%02d] %s", $Y, $MO+1, $DA, $H, $M, $S, $_);
      open(my $logFh, ">>'"${output_file}"'"); print $logFh $res; print($res);'
  else
    perl -ne '($S,$M,$H,$DA,$MO,$Y) = localtime(); $Y += 1900;
      $res=sprintf("[%d-%02d-%02dT%02d:%02d:%02d] %s", $Y, $MO+1, $DA, $H, $M, $S, $_); print($res);'
  fi
}

write_log() {
  echo "$@" | transform_log
}

usage() {
  echo "Usage: backupsend [(-s|--suffix) <suffix>] [(-m|--max-snapshots) <count>] [(-i|--identity-file) <identity_file>] <filesystem> <remote_host>"
  echo
  echo "Creates zfs snapshot with current date and optionally, suffix; Sends it to remote_host."
  echo "Filesystem names should be equal."
  echo "Warning: snapshots are applied with -F on target host"
  echo
  echo "Parameters:"
  echo "    -s|--suffix <suffix>               add suffix to snapshot name"
  echo "    -i|--identity-file <identity_file> use this identity file for ssh"
  echo "    -o|--output <log_file>             write logs to file"
  echo "    -p|--progress                      use pv to display progress"
  echo "    -l|--lines                         print progress every line"
  echo "    -m|--max-snapshots <count>         keep only X snapshots of current suffix"
  echo
  echo "Examples:"
  echo "  Create snapshot mypool/myfs@2020-01-01-weelkly and upload it to host.org using custom rsa key"
  echo "    backupsend -s -weelkly -i /root/.ssh/id_backup.rsa mypool/myfs root@host.org"
  echo
}

main() {
  if [ -z "$filesystem" ] || [ -z "$remote_host" ]; then
    usage
    exit 1
  fi

  construct_ssh_command

  snapshot_name="${filesystem}@$(date +%F)${suffix}"

  if ! zfs list -H -o name -t snapshot -r "${filesystem}" | grep -qF "$snapshot_name"; then
    write_log "Snapshot doesn't exist yet; creating"
    zfs snapshot "$snapshot_name"
    write_log "Snapshot ${snapshot_name} is successfully created"
  else
    write_log "Snapshot ${snapshot_name} already exists"
  fi

  if remote_snapshot_exists "$snapshot_name"; then
    write_log "Snapshot ${snapshot_name} already exists on remote. Exiting."
    exit 0
  fi

  clear_old_snapshots

  older_snapshot="$(get_previous_common_snapshot "$snapshot_name")"

  construct_shell_command "$snapshot_name" "$older_snapshot"

  write_log "Sending snapshot"
  if [[ -n "$show_progress" && -n "$lined_progress" ]]; then
    eval "${shell_command[@]}" 2>&1 | xargs -I{} numfmt --to=iec-i --invalid=ignore {} | transform_log
  else
    eval "${shell_command[@]}" | transform_log
  fi

  write_log "All done"
}

construct_ssh_command() {
  ssh_command+=(ssh)
  if [ -n "$identity_file" ]; then
    ssh_command+=("-i" "${identity_file}")
  fi
  ssh_command+=("${remote_host}")
}

construct_shell_command() {
  snapshot_name="$1"
  older_snapshot="$2"

  shell_command+=(zfs send -R)

  if [ -z "$older_snapshot" ]; then
    write_log "Older snapshots weren't found. Will send whole snapshot"
    shell_command+=("$snapshot_name")
  else
    write_log "Older snapshot found. Will send diff between ${older_snapshot} and ${snapshot_name}"
    shell_command+=(-I "${older_snapshot}" "${snapshot_name}")
  fi

  if [ -n "$show_progress" ]; then
    shell_command+=("|" pv)
    if [ -n "$lined_progress" ]; then
      shell_command+=(-nb)
    fi
  fi

  shell_command+=("|" "${ssh_command[@]}" zfs recv -F "${filesystem}")
}

remote_snapshot_exists() {
  snapshot_name="$1"
  if "${ssh_command[@]}" zfs list -H -o name -t snapshot -r "${filesystem}" \
  | grep -Fx -- "${snapshot_name}" > /dev/null; then
    return 0
  else
    return 1
  fi
}

get_previous_common_snapshot() {
  snapshot_name="$1"
  local_snapshots="$(zfs list -H -o name -t snapshot -r "${filesystem}")"
  remote_snapshots="$("${ssh_command[@]}" zfs list -H -o name -t snapshot -r "${filesystem}")"

  total_snapshots="$(echo "$local_snapshots" | wc -l)"
  if ((total_snapshots == 1)); then
    return
  fi

  while IFS= read -r local_snapshot; do
    if [[ -n "$local_snapshot" ]]; then
      if echo "$remote_snapshots" | grep "$local_snapshot" >/dev/null; then
        echo "$local_snapshot"
        return
      fi
    fi
  done <<<"$(echo "$local_snapshots" | perl -e 'print reverse <>')"
}

clear_old_snapshots() {
  if [[ -z "$max_snapshots" ]]; then
    return
  fi

  local_snapshots="$(zfs list -H -o name -t snapshot -r "${filesystem}")"
  remote_snapshots="$("${ssh_command[@]}" zfs list -H -o name -t snapshot -r "${filesystem}")"

  if [[ -n "$suffix" ]]; then
    local_snapshots="$(echo "$local_snapshots" | grep -- "${suffix}\$")"
    remote_snapshots="$(echo "$remote_snapshots" | grep -- "${suffix}\$")"
  fi

  local_count="$(echo "$local_snapshots" | wc -l)"
  local_overhead=$((local_count - max_snapshots + 1))

  if ((local_overhead > 0)); then
    write_log "Removing $local_overhead older local snapshots"

    while IFS= read -r local_snapshot; do
      if [[ -n "$local_snapshot" ]]; then
        write_log "Removing local $local_snapshot snapshot"
        zfs destroy "$local_snapshot"
      fi
    done <<<"$(echo "$local_snapshots" | head -n "$local_overhead")"
  fi

  remote_count="$(echo "$remote_snapshots" | wc -l)"
  remote_overhead=$((remote_count - max_snapshots + 1))

  if ((remote_overhead > 0)); then
    write_log "Removing $remote_overhead older remote snapshots"
    while IFS= read -r remote_snapshot; do
      if [[ -n "$remote_snapshot" ]]; then
        write_log "Removing remote $remote_snapshot snapshot"
        "${ssh_command[@]}" zfs destroy "$remote_snapshot"
      fi
    done <<<"$(echo "$remote_snapshots" | head -n "$remote_overhead")"
  fi
}

combined_opts() {
  while getopts "hpl" opt; do
    case $opt in
    h)
      usage
      exit
      ;;
    p) show_progress="1" ;;
    l) lined_progress="1" ;;
    *) ;;
    esac
  done
}

while [ $# -gt 0 ]; do
  case "$1" in
  -h | --help)
    usage
    exit
    ;;
  -p | --progress)
    show_progress="1"
    shift
    ;;
  -l | --lines)
    lined_progress="1"
    shift
    ;;
  -m | --max-snapshots)
    max_snapshots="$2"
    shift 2
    ;;
  -s | --suffix)
    suffix="$2"
    shift 2
    ;;
  -i | --identity-file)
    identity_file="$2"
    shift 2
    ;;
  -o | --output)
    output_file="$2"
    shift 2
    ;;
  -*)
    combined_opts "$1"
    shift
    ;;
  *)
    break
    ;;
  esac
done

filesystem="$1"
remote_host="$2"

main
